
AVRASM ver. 2.2.8  D:\Yassin Bassam\Projects\RC5\RC5 with Assembly for Simulation\RC5 with Assembly for Simulation\main.asm Mon Apr 28 11:14:36 2025

[builtin](2): Including file 'D:/Yassin Bassam\Atmel Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
D:\Yassin Bassam\Projects\RC5\RC5 with Assembly for Simulation\RC5 with Assembly for Simulation\main.asm(1): Including file 'D:/Yassin Bassam\Atmel Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328pdef.inc'
[builtin](2): Including file 'D:/Yassin Bassam\Atmel Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
D:\Yassin Bassam\Projects\RC5\RC5 with Assembly for Simulation\RC5 with Assembly for Simulation\main.asm(1): Including file 'D:/Yassin Bassam\Atmel Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328pdef.inc'
                                 
                                 .include "m328pdef.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; RC5 Constants for 16-bit implementation
                                 .equ P16 = 0xB7E1       ; P magic number for 16-bit words  
                                 .equ Q16 = 0x9E37       ; Q magic number for 16-bit words
                                 .equ ROUNDS = 8         ; 8 encryption rounds
                                 .equ const_t = 18       ; Expanded key table size (18 words)
                                 .equ const_b = 12       ; Secret key size in bytes (12)
                                 .equ const_c = 6        ; Secret key size in words (6)
                                 .equ const_n = 54       ; Key expansion iterations (3*max(t,c))
                                 
                                 .dseg
                                 .org 0x0100
000100                           S: .byte 2 * const_t    ; Expanded key table S[0..17]
000124                           L: .byte 2 * const_c    ; Secret key array L[0..5]  
000130                           A: .byte 2              ; Plaintext/ciphertext word A
000132                           B: .byte 2              ; Plaintext/ciphertext word B
                                 
                                 .cseg
                                 .org 0x0000
000000 c006                          rjmp main           ; Reset vector jumps to main
                                 
                                 ; Example 96-bit secret key (12 bytes)
000001 0123
000002 4567
000003 89ab
000004 cdef
000005 fedc
000006 ba98                      K: .db 0x23, 0x01, 0x67, 0x45, 0xAB, 0x89, 0xEF, 0xCD, 0xDC, 0xFE, 0x98, 0xBA   
                                 
                                 ;-------------------------------------------------------------
                                 	.MACRO UPDATE_A_B
                                 	MOV R2, ZL
                                 	MOV R3, ZH
                                 	ldi ZL, low(A)
                                     ldi ZH, high(A)
                                     ld r4, Z+          
                                     ld r5, Z+          
                                     ldi ZL, low(B)
                                     ldi ZH, high(B)
                                     ld r6, Z+          
                                     ld r7, Z+
                                 	MOV ZL, R2
                                 	MOV ZH, R3
                                 	CLR R2
                                 	CLR R3
                                 	.ENDMACRO
                                 	;-------------------------------------------------------------
                                 	.MACRO CLEAN
                                 	CLR R0
                                 	CLR R1
                                 	CLR R2
                                 	CLR R3
                                 	CLR R4
                                 	CLR R5
                                 	CLR R6
                                 	CLR R7
                                 	CLR R8
                                 	CLR R9
                                 	CLR R10
                                 	CLR R11
                                 	CLR R12
                                 	CLR R13
                                 	CLR R14
                                 	CLR R15
                                 	CLR R16
                                 	CLR R17
                                 	CLR R18
                                 	CLR R19
                                 	CLR R20
                                 	CLR R21
                                 	CLR R22
                                 	CLR R23
                                 	CLR R24
                                 	CLR R25
                                 	CLR R26
                                 	CLR R27
                                 	CLR R28
                                 	CLR R29
                                 	CLR R30
                                 	CLR R31
                                 	.ENDMACRO
                                 	;-------------------------------------------------------------
                                 	.MACRO LCD
                                 
                                 	; Main LCD Routine
                                 	LCD_write:
                                 	LDI   R25, 0xFF           ; Set all bits
                                 	OUT   DDRD, R25           ; Port D as output (data)
                                 	OUT   DDRB, R25           ; Port B as output (control)
                                 	CBI   PORTB, 0            ; EN = 0
                                 	RCALL delay_ms            ; Wait for LCD power on
                                     
                                 	RCALL LCD_init            ; Initialize LCD
                                 	RCALL disp_message        ; Display message
                                     
                                 	; Infinite loop to stop execution
                                 	end:
                                 	RJMP  end_dis
                                 
                                 
                                 	; Initialize LCD
                                 	LCD_init:
                                 	LDI   R25, 0x33           ; Init 4-bit mode
                                 	RCALL command_wrt
                                 	RCALL delay_ms
                                     
                                 	LDI   R25, 0x32           ; Init 4-bit mode again
                                 	RCALL command_wrt
                                 	RCALL delay_ms
                                     
                                 	LDI   R25, 0x28           ; 2 lines, 5x7 matrix
                                 	RCALL command_wrt
                                 	RCALL delay_ms
                                     
                                 	LDI   R25, 0x0C           ; Display ON, cursor OFF
                                 	RCALL command_wrt
                                     
                                 	LDI   R25, 0x01           ; Clear LCD
                                 	RCALL command_wrt
                                 	RCALL delay_ms
                                     
                                 	LDI   R25, 0x06           ; Shift cursor right
                                 	RCALL command_wrt
                                 	RET
                                 
                                 
                                 	; Send Command to LCD
                                 	command_wrt:
                                 	MOV   R30, R25            ; Copy command to R30
                                 	ANDI  R30, 0xF0           ; Get high nibble
                                 	OUT   PORTD, R30          ; Send to data port
                                 	CBI   PORTB, 1            ; RS = 0 (command)
                                 	SBI   PORTB, 0            ; EN = 1
                                 	RCALL delay_short         ; Short pulse
                                 	CBI   PORTB, 0            ; EN = 0
                                 	RCALL delay_us            ; Wait
                                     
                                 	MOV   R30, R25            ; Copy command to R30
                                 	SWAP  R30                 ; Get low nibble
                                 	ANDI  R30, 0xF0
                                 	OUT   PORTD, R30          ; Send to data port
                                 	SBI   PORTB, 0            ; EN = 1
                                 	RCALL delay_short         ; Short pulse
                                 	CBI   PORTB, 0            ; EN = 0
                                 	RCALL delay_us            ; Wait
                                 	RET
                                 
                                 
                                 	; Send Data to LCD
                                 	data_wrt:
                                 	MOV   R30, R25            ; Copy data to R30
                                 	ANDI  R30, 0xF0           ; Get high nibble
                                 	OUT   PORTD, R30          ; Send to data port
                                 	SBI   PORTB, 1            ; RS = 1 (data)
                                 	SBI   PORTB, 0            ; EN = 1
                                 	RCALL delay_short         ; Short pulse
                                 	CBI   PORTB, 0            ; EN = 0
                                 	RCALL delay_us            ; Wait
                                     
                                 	MOV   R30, R25            ; Copy data to R30
                                 	SWAP  R30                 ; Get low nibble
                                 	ANDI  R30, 0xF0
                                 	OUT   PORTD, R30          ; Send to data port
                                 	SBI   PORTB, 0            ; EN = 1
                                 	RCALL delay_short         ; Short pulse
                                 	CBI   PORTB, 0            ; EN = 0
                                 	RCALL delay_us            ; Wait
                                 	RET
                                 
                                 
                                 	; Display Message
                                 	disp_message:
                                 	MOV   R25, R5             ; Display character from R5
                                 	RCALL data_wrt
                                 	RCALL delay_seconds
                                     
                                 	MOV   R25, R4             ; Display character from R4
                                 	RCALL data_wrt
                                 	RCALL delay_seconds
                                     
                                 	MOV   R25, R7             ; Display character from R7
                                 	RCALL data_wrt
                                 	RCALL delay_seconds
                                     
                                 	MOV   R25, R6             ; Display character from R6
                                 	RCALL data_wrt
                                 	RCALL delay_seconds
                                     
                                 	; Wait 3 seconds (12 x 250ms)
                                 	LDI   R28, 12
                                 	wait_loop:
                                 	RCALL delay_seconds
                                 	DEC   R28
                                 	BRNE  wait_loop
                                 	RET
                                 
                                 
                                 	; Delay Routines
                                 	delay_short:
                                 	NOP
                                 	NOP
                                 	RET
                                 
                                 	delay_us:
                                 	LDI   R20, 90
                                 	us_loop:
                                 	RCALL delay_short
                                 	DEC   R20
                                 	BRNE  us_loop
                                 	RET
                                 
                                 	delay_ms:
                                 	LDI   R29, 40
                                 	ms_loop:
                                 	RCALL delay_us
                                 	DEC   R29
                                 	BRNE  ms_loop
                                 	RET
                                 
                                 	delay_seconds:
                                 	LDI   R20, 255
                                 	outer_loop:
                                 	LDI   R29, 255
                                 	mid_loop:
                                 	LDI   R30, 20
                                 	inner_loop:
                                 	DEC   R30
                                 	BRNE  inner_loop
                                 	DEC   R29
                                 	BRNE  mid_loop
                                 	DEC   R20
                                 	BRNE  outer_loop
                                 	RET
                                 
                                 
                                 	end_dis:
                                 	NOP
                                 	.ENDMACRO
                                 ;-------------------------------------------------------------	
                                 
                                 main:
                                     ; Initialize stack pointer
000007 e008                          ldi r16, high(RAMEND)
000008 bf0e                          out SPH, r16
000009 ef0f                          ldi r16, low(RAMEND)
00000a bf0d                          out SPL, r16
                                 
                                     ; Initialize example plaintext (A=0x5941, B=0x5337)
00000b e3e0                          ldi ZL, low(A)
00000c e0f1                          ldi ZH, high(A)
00000d e401                          ldi r16, 0x41       ; A low byte
00000e 9301                          st Z+, r16
00000f e509                          ldi r16, 0x59       ; A high byte
000010 9301                          st Z+, r16
                                     
000011 e3e2                          ldi ZL, low(B)
000012 e0f1                          ldi ZH, high(B)
000013 e307                          ldi r16, 0x37       ; B low byte
000014 9301                          st Z+, r16
000015 e503                          ldi r16, 0x53       ; B high byte
000016 9301                          st Z+, r16
                                     
000017 d18f                          rcall key_expansion ; Expand key into S table
000018 ef9f
000019 b99a
00001a b994
00001b 9828
00001c d04f
00001d d002
00001e d034
00001f c05b
000020 e393
000021 d00f
000022 d049
000023 e392
000024 d00c
000025 d046
000026 e298
000027 d009
000028 d043
000029 e09c
00002a d006
00002b e091
00002c d004
00002d d03e
00002e e096
00002f d001
000030 9508
000031 2fe9
000032 7fe0
000033 b9eb
000034 9829
000035 9a28
000036 d02d
000037 9828
000038 d02e
000039 2fe9
00003a 95e2
00003b 7fe0
00003c b9eb
00003d 9a28
00003e d025
00003f 9828
000040 d026
000041 9508
000042 2fe9
000043 7fe0
000044 b9eb
000045 9a29
000046 9a28
000047 d01c
000048 9828
000049 d01d
00004a 2fe9
00004b 95e2
00004c 7fe0
00004d b9eb
00004e 9a28
00004f d014
000050 9828
000051 d015
000052 9508
000053 2d95
000054 dfed
000055 d01b
000056 2d94
000057 dfea
000058 d018
000059 2d97
00005a dfe7
00005b d015
00005c 2d96
00005d dfe4
00005e d012
00005f e0cc
000060 d010
000061 95ca
000062 f7e9
000063 9508
000064 0000
000065 0000
000066 9508
000067 e54a
000068 dffb
000069 954a
00006a f7e9
00006b 9508
00006c e2d8
00006d dff9
00006e 95da
00006f f7e9
000070 9508
000071 ef4f
000072 efdf
000073 e1e4
000074 95ea
000075 f7f1
000076 95da
000077 f7d9
000078 954a
000079 f7c1
00007a 9508
00007b 0000                      	lcd
00007c 2400
00007d 2411
00007e 2422
00007f 2433
000080 2444
000081 2455
000082 2466
000083 2477
000084 2488
000085 2499
000086 24aa
000087 24bb
000088 24cc
000089 24dd
00008a 24ee
00008b 24ff
00008c 2700
00008d 2711
00008e 2722
00008f 2733
000090 2744
000091 2755
000092 2766
000093 2777
000094 2788
000095 2799
000096 27aa
000097 27bb
000098 27cc
000099 27dd
00009a 27ee
00009b 27ff                      	clean
00009c d17f                          rcall encrypt       ; Encrypt plaintext
00009d ef9f
00009e b99a
00009f b994
0000a0 9828
0000a1 d04f
0000a2 d002
0000a3 d034
0000a4 c05b
0000a5 e393
0000a6 d00f
0000a7 d049
0000a8 e392
0000a9 d00c
0000aa d046
0000ab e298
0000ac d009
0000ad d043
0000ae e09c
0000af d006
0000b0 e091
0000b1 d004
0000b2 d03e
0000b3 e096
0000b4 d001
0000b5 9508
0000b6 2fe9
0000b7 7fe0
0000b8 b9eb
0000b9 9829
0000ba 9a28
0000bb d02d
0000bc 9828
0000bd d02e
0000be 2fe9
0000bf 95e2
0000c0 7fe0
0000c1 b9eb
0000c2 9a28
0000c3 d025
0000c4 9828
0000c5 d026
0000c6 9508
0000c7 2fe9
0000c8 7fe0
0000c9 b9eb
0000ca 9a29
0000cb 9a28
0000cc d01c
0000cd 9828
0000ce d01d
0000cf 2fe9
0000d0 95e2
0000d1 7fe0
0000d2 b9eb
0000d3 9a28
0000d4 d014
0000d5 9828
0000d6 d015
0000d7 9508
0000d8 2d95
0000d9 dfed
0000da d01b
0000db 2d94
0000dc dfea
0000dd d018
0000de 2d97
0000df dfe7
0000e0 d015
0000e1 2d96
0000e2 dfe4
0000e3 d012
0000e4 e0cc
0000e5 d010
0000e6 95ca
0000e7 f7e9
0000e8 9508
0000e9 0000
0000ea 0000
0000eb 9508
0000ec e54a
0000ed dffb
0000ee 954a
0000ef f7e9
0000f0 9508
0000f1 e2d8
0000f2 dff9
0000f3 95da
0000f4 f7e9
0000f5 9508
0000f6 ef4f
0000f7 efdf
0000f8 e1e4
0000f9 95ea
0000fa f7f1
0000fb 95da
0000fc f7d9
0000fd 954a
0000fe f7c1
0000ff 9508
000100 0000                      	lcd
000101 2400
000102 2411
000103 2422
000104 2433
000105 2444
000106 2455
000107 2466
000108 2477
000109 2488
00010a 2499
00010b 24aa
00010c 24bb
00010d 24cc
00010e 24dd
00010f 24ee
000110 24ff
000111 2700
000112 2711
000113 2722
000114 2733
000115 2744
000116 2755
000117 2766
000118 2777
000119 2788
00011a 2799
00011b 27aa
00011c 27bb
00011d 27cc
00011e 27dd
00011f 27ee
000120 27ff                      	clean
000121 d16b                          rcall decrypt       ; Decrypt ciphertext
000122 ef9f
000123 b99a
000124 b994
000125 9828
000126 d04f
000127 d002
000128 d034
000129 c05b
00012a e393
00012b d00f
00012c d049
00012d e392
00012e d00c
00012f d046
000130 e298
000131 d009
000132 d043
000133 e09c
000134 d006
000135 e091
000136 d004
000137 d03e
000138 e096
000139 d001
00013a 9508
00013b 2fe9
00013c 7fe0
00013d b9eb
00013e 9829
00013f 9a28
000140 d02d
000141 9828
000142 d02e
000143 2fe9
000144 95e2
000145 7fe0
000146 b9eb
000147 9a28
000148 d025
000149 9828
00014a d026
00014b 9508
00014c 2fe9
00014d 7fe0
00014e b9eb
00014f 9a29
000150 9a28
000151 d01c
000152 9828
000153 d01d
000154 2fe9
000155 95e2
000156 7fe0
000157 b9eb
000158 9a28
000159 d014
00015a 9828
00015b d015
00015c 9508
00015d 2d95
00015e dfed
00015f d01b
000160 2d94
000161 dfea
000162 d018
000163 2d97
000164 dfe7
000165 d015
000166 2d96
000167 dfe4
000168 d012
000169 e0cc
00016a d010
00016b 95ca
00016c f7e9
00016d 9508
00016e 0000
00016f 0000
000170 9508
000171 e54a
000172 dffb
000173 954a
000174 f7e9
000175 9508
000176 e2d8
000177 dff9
000178 95da
000179 f7e9
00017a 9508
00017b ef4f
00017c efdf
00017d e1e4
00017e 95ea
00017f f7f1
000180 95da
000181 f7d9
000182 954a
000183 f7c1
000184 9508
000185 0000                      	lcd
000186 2400
000187 2411
000188 2422
000189 2433
00018a 2444
00018b 2455
00018c 2466
00018d 2477
00018e 2488
00018f 2499
000190 24aa
000191 24bb
000192 24cc
000193 24dd
000194 24ee
000195 24ff
000196 2700
000197 2711
000198 2722
000199 2733
00019a 2744
00019b 2755
00019c 2766
00019d 2777
00019e 2788
00019f 2799
0001a0 27aa
0001a1 27bb
0001a2 27cc
0001a3 27dd
0001a4 27ee
0001a5 27ff                      	clean
                                     
                                     main_loop:          ; Infinite loop after completion
0001a6 cfff                              rjmp main_loop
                                 
                                 ; Key expansion routine
                                 key_expansion:
                                     ; Step 1: Copy secret key K into L array
0001a7 e0e2                          ldi ZL, low(K*2)   
0001a8 e0f0                          ldi ZH, high(K*2)
0001a9 e2c4                          ldi YL, low(L)
0001aa e0d1                          ldi YH, high(L)
0001ab e00c                          ldi r16, const_b
                                 copy_key_loop:
0001ac 9115                          lpm r17, Z+
0001ad 9319                          st Y+, r17
0001ae 950a                          dec r16
0001af f7e1                          brne copy_key_loop
                                 
                                     ; Step 2: Initialize S array with magic constants
0001b0 e0e0                          ldi ZL, low(S)
0001b1 e0f1                          ldi ZH, high(S)
0001b2 e102                          ldi r16, const_t
0001b3 ee11                          ldi r17, low(P16)
0001b4 eb27                          ldi r18, high(P16)
                                 init_s_loop:
0001b5 9311                          st Z+, r17
0001b6 9321                          st Z+, r18
0001b7 e337                          ldi r19, low(Q16)
0001b8 0f13                          add r17, r19
0001b9 e93e                          ldi r19, high(Q16)
0001ba 1f23                          adc r18, r19
0001bb 950a                          dec r16
0001bc f7c1                          brne init_s_loop
                                 
                                     ; Step 3: Mix secret key into expanded key table
0001bd e306                          ldi r16, const_n
0001be 2ef0                          mov r15, r16        
0001bf 2700                          clr r16             ; i = 0
0001c0 2711                          clr r17             ; j = 0
0001c1 2722                          clr r18             ; A = 0
0001c2 2733                          clr r19             
0001c3 2744                          clr r20             ; B = 0
0001c4 2755                          clr r21             
0001c5 2766                          clr r22             ; Temp for S[i].low
0001c6 2777                          clr r23             ; Temp for S[i].high
0001c7 2788                          clr r24             ; Temp for L[j].low
0001c8 2799                          clr r25             ; Temp for L[j].high
                                 mix_loop:
                                     ; Process S[i] = (S[i] + A + B) <<< 3
0001c9 e0e0                          ldi ZL, low(S)
0001ca e0f1                          ldi ZH, high(S)
0001cb 0fe0                          add ZL, r16
0001cc 1df1                          adc ZH, r1
0001cd 0fe0                          add ZL, r16         ; Word offset
0001ce 1df1                          adc ZH, r1
0001cf 8160                          ld r22, Z           
0001d0 8171                          ldd r23, Z+1        
                                     
0001d1 0f62                          add r22, r18        
0001d2 1f73                          adc r23, r19
0001d3 0f64                          add r22, r20
0001d4 1f75                          adc r23, r21
                                 
                                     ; Rotate left 3 bits
0001d5 e0a3                          ldi r26,3
                                     rotate_s:
0001d6 0f66                          lsl r22
0001d7 1f77                          rol r23
0001d8 b6ef                          in r14,SREG
0001d9 fae0                          bst r14,0
0001da f960                          bld r22,0
0001db 95aa                          dec r26
0001dc f7c9                          brne rotate_s
                                 
0001dd 24ee                          clr r14
                                     
0001de 9361                          st Z+, r22
0001df 9371                          st Z+, r23
                                 
0001e0 2f26                          mov r18, r22
0001e1 2f37                          mov r19, r23
                                 
                                     ; Process L[j] = (L[j] + A + B) <<< (A+B)
0001e2 e2c4                          ldi YL, low(L)
0001e3 e0d1                          ldi YH, high(L)
0001e4 0fc1                          add YL, r17
0001e5 1dd1                          adc YH, r1
0001e6 0fc1                          add YL, r17         ; Word offset
0001e7 1dd1                          adc YH, r1
0001e8 8188                          ld r24, Y           
0001e9 8199                          ldd r25, Y+1        
                                     
0001ea 0f82                          add r24, r18        
0001eb 1f93                          adc r25, r19
0001ec 0f84                          add r24, r20        
0001ed 1f95                          adc r25, r21        
                                     
                                     ; Rotate left by (A+B) mod 16
0001ee 2fa2                          mov r26, r18
0001ef 0fa4                          add r26, r20
0001f0 70af                          andi r26, 0x0F      
                                 rotate_l_loop:
0001f1 23aa                          tst r26
0001f2 f051                          breq rotate_l_done
0001f3 0f88                          lsl r24
0001f4 1f99                          rol r25
0001f5 b6ef                          in r14,SREG
0001f6 fae0                          bst r14,0
0001f7 f980                          bld r24,0
0001f8 0d71                          add r23, r1
0001f9 95aa                          dec r26
0001fa cff6                          rjmp rotate_l_loop
                                 
                                 step4jump:
0001fb 940c 01c9                     jmp mix_loop
                                 
                                 rotate_l_done:
0001fd 27aa                          clr r26
0001fe 24ee                          clr r14
                                 
0001ff 9389                          st Y+, r24
000200 9399                          st Y+, r25
                                 
000201 2f48                          mov r20, r24
000202 2f59                          mov r21, r25
                                 
                                     ; Update indices i and j
000203 9503                          inc r16             
000204 3102                          cpi r16, const_t
000205 f008                          brlo skip_i_reset
000206 2700                          clr r16
                                 skip_i_reset:
000207 9513                          inc r17             
000208 3016                          cpi r17, const_c
000209 f008                          brlo skip_j_reset
00020a 2711                          clr r17
                                 skip_j_reset:
00020b 94fa                          dec r15
00020c f771                          brne step4jump
00020d 2e2e
00020e 2e3f
00020f e3e0
000210 e0f1
000211 9041
000212 9051
000213 e3e2
000214 e0f1
000215 9061
000216 9071
000217 2de2
000218 2df3
000219 2422
00021a 2433                      	UPDATE_A_B
00021b 9508                          ret
                                 
                                 ; Encryption routine
                                 encrypt:
00021c 930f                          push r16
00021d 931f                          push r17
00021e 932f                          push r18
00021f 933f                          push r19
000220 934f                          push r20
000221 935f                          push r21
000222 936f                          push r22
000223 937f                          push r23
000224 938f                          push r24
000225 939f                          push r25
000226 93ef                          push ZL
000227 93ff                          push ZH
                                 
                                     ; Load plaintext A and B
000228 e3e0                          ldi ZL, low(A)
000229 e0f1                          ldi ZH, high(A)
00022a 9101                          ld r16, Z+          
00022b 9111                          ld r17, Z+          
00022c e3e2                          ldi ZL, low(B)
00022d e0f1                          ldi ZH, high(B)
00022e 9121                          ld r18, Z+          
00022f 9131                          ld r19, Z+          
                                 
                                     ; Initial key addition
000230 e0e0                          ldi ZL, low(S)
000231 e0f1                          ldi ZH, high(S)
000232 9141                          ld r20, Z+          
000233 9151                          ld r21, Z+          
000234 0f04                          add r16, r20        
000235 1f15                          adc r17, r21
000236 9141                          ld r20, Z+          
000237 9151                          ld r21, Z+          
000238 0f24                          add r18, r20        
000239 1f35                          adc r19, r21
                                 
                                     ; Main encryption rounds
00023a e061                          ldi r22, 1          
                                 encrypt_loop:
                                     ; Calculate S[2*i] address
00023b 93ef                          push ZL
00023c 93ff                          push ZH
00023d e0e0                          ldi ZL, low(S)
00023e e0f1                          ldi ZH, high(S)
00023f 2f46                          mov r20, r22
000240 0f44                          lsl r20             
000241 0f44                          lsl r20             
000242 0fe4                          add ZL, r20
000243 1df1                          adc ZH, r1          
                                 
                                     ; A = ((A XOR B) <<< B) + S[2*i]
000244 2702                          eor r16, r18        
000245 2713                          eor r17, r19        
                                 
                                     ; Rotate left by B mod 16
000246 2f72                          mov r23, r18
000247 707f                          andi r23, 0x0F      
                                 rotate_left_a:
000248 2377                          tst r23
000249 f041                          breq rotate_a_done
00024a 0f00                          lsl r16
00024b 1f11                          rol r17
00024c b6ef                          in r14,SREG
00024d fae0                          bst r14,0
00024e f900                          bld r16,0
00024f 24ee                          clr r14
000250 957a                          dec r23
000251 cff6                          rjmp rotate_left_a
                                 rotate_a_done:
                                 
000252 9141                          ld r20, Z+          
000253 9151                          ld r21, Z+          
000254 0f04                          add r16, r20        
000255 1f15                          adc r17, r21
                                 
                                     ; B = ((B XOR A) <<< A) + S[2*i+1]
000256 2720                          eor r18, r16        
000257 2731                          eor r19, r17        
                                 
                                     ; Rotate left by A mod 16
000258 2f70                          mov r23, r16
000259 707f                          andi r23, 0x0F      
                                 rotate_left_b:
00025a 2377                          tst r23
00025b f029                          breq rotate_b_done
00025c 0f22                          lsl r18
00025d 1f33                          rol r19
00025e 1d21                          adc r18, r1
00025f 957a                          dec r23
000260 cff9                          rjmp rotate_left_b
                                 rotate_b_done:
                                 
000261 9141                          ld r20, Z+          
000262 9151                          ld r21, Z+          
000263 0f24                          add r18, r20        
000264 1f35                          adc r19, r21
                                 
000265 91ff                          pop ZH
000266 91ef                          pop ZL
                                 
000267 9563                          inc r22             
000268 3069                          cpi r22, ROUNDS+1   
000269 f288                          brlo encrypt_loop   
                                 
                                     ; Store ciphertext
00026a e3e0                          ldi ZL, low(A)
00026b e0f1                          ldi ZH, high(A)
00026c 9301                          st Z+, r16
00026d 9311                          st Z+, r17
00026e e3e2                          ldi ZL, low(B)
00026f e0f1                          ldi ZH, high(B)
000270 9321                          st Z+, r18
000271 9331                          st Z+, r19
                                 
000272 2e2e
000273 2e3f
000274 e3e0
000275 e0f1
000276 9041
000277 9051
000278 e3e2
000279 e0f1
00027a 9061
00027b 9071
00027c 2de2
00027d 2df3
00027e 2422
00027f 2433                      	UPDATE_A_B
                                 
000280 91ff                          pop ZH
000281 91ef                          pop ZL
000282 919f                          pop r25
000283 918f                          pop r24
000284 917f                          pop r23
000285 916f                          pop r22
000286 915f                          pop r21
000287 914f                          pop r20
000288 913f                          pop r19
000289 912f                          pop r18
00028a 911f                          pop r17
00028b 910f                          pop r16
00028c 9508                          ret
                                 
                                 ; Decryption routine
                                 decrypt:
00028d 930f                          push r16
00028e 931f                          push r17
00028f 932f                          push r18
000290 933f                          push r19
000291 934f                          push r20
000292 935f                          push r21
000293 936f                          push r22
000294 937f                          push r23
000295 938f                          push r24
000296 939f                          push r25
000297 93ef                          push ZL
000298 93ff                          push ZH
                                 
                                     ; Load ciphertext A and B
000299 e3e0                          ldi ZL, low(A)
00029a e0f1                          ldi ZH, high(A)
00029b 9101                          ld r16, Z+          
00029c 9111                          ld r17, Z+          
00029d e3e2                          ldi ZL, low(B)
00029e e0f1                          ldi ZH, high(B)
00029f 9121                          ld r18, Z+          
0002a0 9131                          ld r19, Z+          
                                 
                                     ; Main decryption rounds
0002a1 e068                          ldi r22, ROUNDS     
                                 decrypt_loop:
                                     ; Calculate S[2*i+1] address
0002a2 93ef                          push ZL
0002a3 93ff                          push ZH
0002a4 e0e0                          ldi ZL, low(S)
0002a5 e0f1                          ldi ZH, high(S)
0002a6 2f46                          mov r20, r22
0002a7 0f44                          lsl r20             
0002a8 0f44                          lsl r20             
0002a9 9632                          adiw ZL, 2          
0002aa 0fe4                          add ZL, r20
0002ab 1df1                          adc ZH, r1          
                                 
                                     ; B = (B - S[2*i+1]) >>> A) XOR A
0002ac 9141                          ld r20, Z+          
0002ad 9151                          ld r21, Z+          
0002ae 1b24                          sub r18, r20        
0002af 0b35                          sbc r19, r21
                                 
                                     ; Rotate right by A mod 16
0002b0 2f70                          mov r23, r16
0002b1 707f                          andi r23, 0x0F      
                                 rotate_right_b:
0002b2 2377                          tst r23
0002b3 f031                          breq rotate_rb_done
0002b4 9536                          lsr r19
0002b5 9527                          ror r18
0002b6 f408                          brcc rotate_rb_skip
0002b7 6830                          ori r19, 0x80       
                                 rotate_rb_skip:
0002b8 957a                          dec r23
0002b9 cff8                          rjmp rotate_right_b
                                 rotate_rb_done:
                                 
0002ba 2720                          eor r18, r16        
0002bb 2731                          eor r19, r17        
                                 
                                     ; Calculate S[2*i] address
0002bc e0e0                          ldi ZL, low(S)
0002bd e0f1                          ldi ZH, high(S)
0002be 2f46                          mov r20, r22
0002bf 0f44                          lsl r20             
0002c0 0f44                          lsl r20             
0002c1 0fe4                          add ZL, r20
0002c2 1df1                          adc ZH, r1          
                                 
                                     ; A = (A - S[2*i]) >>> B) XOR B
0002c3 9141                          ld r20, Z+          
0002c4 9151                          ld r21, Z+          
0002c5 1b04                          sub r16, r20        
0002c6 0b15                          sbc r17, r21
                                 
                                     ; Rotate right by B mod 16
0002c7 2f72                          mov r23, r18
0002c8 707f                          andi r23, 0x0F      
                                 rotate_right_a:
0002c9 2377                          tst r23
0002ca f031                          breq rotate_ra_done
0002cb 9516                          lsr r17
0002cc 9507                          ror r16
0002cd f408                          brcc rotate_ra_skip
0002ce 6810                          ori r17, 0x80       
                                 rotate_ra_skip:
0002cf 957a                          dec r23
0002d0 cff8                          rjmp rotate_right_a
                                 rotate_ra_done:
                                 
0002d1 2702                          eor r16, r18        
0002d2 2713                          eor r17, r19        
                                 
0002d3 91ff                          pop ZH
0002d4 91ef                          pop ZL
                                 
0002d5 956a                          dec r22
0002d6 f659                          brne decrypt_loop
                                 
                                     ; Final key subtraction
0002d7 e0e0                          ldi ZL, low(S)
0002d8 e0f1                          ldi ZH, high(S)
0002d9 9141                          ld r20, Z+          
0002da 9151                          ld r21, Z+          
0002db 1b04                          sub r16, r20        
0002dc 0b15                          sbc r17, r21
0002dd 9141                          ld r20, Z+          
0002de 9151                          ld r21, Z+          
0002df 1b24                          sub r18, r20        
0002e0 0b35                          sbc r19, r21
                                 
                                     ; Store plaintext
0002e1 e3e0                          ldi ZL, low(A)
0002e2 e0f1                          ldi ZH, high(A)
0002e3 9301                          st Z+, r16
0002e4 9311                          st Z+, r17
0002e5 e3e2                          ldi ZL, low(B)
0002e6 e0f1                          ldi ZH, high(B)
0002e7 9321                          st Z+, r18
0002e8 9331                          st Z+, r19
                                 
0002e9 2e2e
0002ea 2e3f
0002eb e3e0
0002ec e0f1
0002ed 9041
0002ee 9051
0002ef e3e2
0002f0 e0f1
0002f1 9061
0002f2 9071
0002f3 2de2
0002f4 2df3
0002f5 2422
0002f6 2433                      	UPDATE_A_B
                                 
0002f7 91ff                          pop ZH
0002f8 91ef                          pop ZL
0002f9 919f                          pop r25
0002fa 918f                          pop r24
0002fb 917f                          pop r23
0002fc 916f                          pop r22
0002fd 915f                          pop r21
0002fe 914f                          pop r20
0002ff 913f                          pop r19
000300 912f                          pop r18
000301 911f                          pop r17
000302 910f                          pop r16
000303 9508                          ret


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :   5 z  :  55 r0 :   3 r1 :  12 r2 :  12 r3 :  12 r4 :   9 
r5 :   9 r6 :   9 r7 :   9 r8 :   3 r9 :   3 r10:   3 r11:   3 r12:   3 
r13:   3 r14:  12 r15:   5 r16:  48 r17:  33 r18:  32 r19:  30 r20:  52 
r21:  27 r22:  23 r23:  31 r24:  15 r25:  65 r26:  11 r27:   3 r28:  13 
r29:  19 r30:  95 r31:  46 
Registers used: 34 out of 35 (97.1%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :  17 add   :  18 adiw  :   1 and   :   0 
andi  :  17 asr   :   0 bclr  :   0 bld   :   3 brbc  :   0 brbs  :   0 
brcc  :   2 brcs  :   0 break :   0 breq  :   5 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 brlt  :   0 brmi  :   0 
brne  :  23 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   3 call  :   0 cbi   :  18 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   : 118 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :   3 cpse  :   0 dec   :  28 eor   :   8 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   3 inc   :   3 jmp   :   1 
ld    :  38 ldd   :   2 ldi   : 107 lds   :   0 lpm   :   1 lsl   :  10 
lsr   :   2 mov   :  49 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   9 or    :   0 ori   :   2 out   :  20 pop   :  28 
push  :  28 rcall :  99 ret   :  27 reti  :   0 rjmp  :  10 rol   :   4 
ror   :   2 sbc   :   4 sbci  :   0 sbi   :  15 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :  19 std   :   0 sts   :   0 
sub   :   4 subi  :   0 swap  :   6 tst   :   5 wdr   :   0 
Instructions used: 41 out of 113 (36.3%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000608   1532     12   1544   32768   4.7%
[.dseg] 0x000100 0x000134      0     52     52    2048   2.5%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
